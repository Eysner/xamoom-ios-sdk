<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/XMMEnduserApi.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/XMMEnduserApi</TokenIdentifier>
			<Abstract type="html">XMMEnduserApi is the main part of the xamoom-ios-sdk. You can use it to send api request to the xamoom-api.</Abstract>
			<DeclaredIn>XMMEnduserApi.h</DeclaredIn>
            
			
			<NodeRef refid="33"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XMMEnduserApi/setSystemLanguage:</TokenIdentifier>
			<Abstract type="html">The preferred language of the user.</Abstract>
			<DeclaredIn>XMMEnduserApi.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *systemLanguage</Declaration>
			
			
			<Anchor>//api/name/systemLanguage</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XMMEnduserApi/systemLanguage</TokenIdentifier>
			<Abstract type="html">The preferred language of the user.</Abstract>
			<DeclaredIn>XMMEnduserApi.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *systemLanguage</Declaration>
			
			
			<Anchor>//api/name/systemLanguage</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/XMMEnduserApi/systemLanguage</TokenIdentifier>
			<Abstract type="html">The preferred language of the user.</Abstract>
			<DeclaredIn>XMMEnduserApi.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *systemLanguage</Declaration>
			
			
			<Anchor>//api/name/systemLanguage</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XMMEnduserApi/setQrCodeViewControllerCancelButtonTitle:</TokenIdentifier>
			<Abstract type="html">String with the title of the qr code view cancel button.</Abstract>
			<DeclaredIn>XMMEnduserApi.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *qrCodeViewControllerCancelButtonTitle</Declaration>
			
			
			<Anchor>//api/name/qrCodeViewControllerCancelButtonTitle</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XMMEnduserApi/qrCodeViewControllerCancelButtonTitle</TokenIdentifier>
			<Abstract type="html">String with the title of the qr code view cancel button.</Abstract>
			<DeclaredIn>XMMEnduserApi.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *qrCodeViewControllerCancelButtonTitle</Declaration>
			
			
			<Anchor>//api/name/qrCodeViewControllerCancelButtonTitle</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/XMMEnduserApi/qrCodeViewControllerCancelButtonTitle</TokenIdentifier>
			<Abstract type="html">String with the title of the qr code view cancel button.</Abstract>
			<DeclaredIn>XMMEnduserApi.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *qrCodeViewControllerCancelButtonTitle</Declaration>
			
			
			<Anchor>//api/name/qrCodeViewControllerCancelButtonTitle</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/XMMEnduserApi/sharedInstance</TokenIdentifier>
			<Abstract type="html">A shared instance from XMMEnduserApi.</Abstract>
			<DeclaredIn>XMMEnduserApi.h</DeclaredIn>
			
			<Declaration>+ (XMMEnduserApi *)sharedInstance</Declaration>
			
			
			<Anchor>//api/name/sharedInstance</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XMMEnduserApi/init</TokenIdentifier>
			<Abstract type="html">Inits the XMMEnduserApi: sets the apiBaseUrl and gets the preferred systemLanguage.</Abstract>
			<DeclaredIn>XMMEnduserApi.h</DeclaredIn>
			
			<Declaration>- (instancetype)init</Declaration>
			
			<ReturnValue><Abstract type="html">id</Abstract></ReturnValue>
			<Anchor>//api/name/init</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XMMEnduserApi/setApiKey:</TokenIdentifier>
			<Abstract type="html">Set your API Key from the xamoom-system.</Abstract>
			<DeclaredIn>XMMEnduserApi.h</DeclaredIn>
			
			<Declaration>- (void)setApiKey:(NSString *)apiKey</Declaration>
			<Parameters>
				<Parameter>
					<Name>apiKey</Name>
					<Abstract type="html">The API key from your xamoom system</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setApiKey:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XMMEnduserApi/contentWithContentId:includeStyle:includeMenu:withLanguage:full:completion:error:</TokenIdentifier>
			<Abstract type="html">Makes an api call to xamoom with a unique contentId. If the selected language is not available the default language will be returned.</Abstract>
			<DeclaredIn>XMMEnduserApi.h</DeclaredIn>
			
			<Declaration>- (void)contentWithContentId:(NSString *)contentId includeStyle:(BOOL)style includeMenu:(BOOL)menu withLanguage:(NSString *)language full:(BOOL)full completion:(void ( ^ ) ( XMMContentById *result ))completionHandler error:(void ( ^ ) ( XMMError *error ))errorHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>contentId</Name>
					<Abstract type="html">The id of the content from xamoom backend</Abstract>
				</Parameter><Parameter>
					<Name>style</Name>
					<Abstract type="html">True or False for returning the style from xamoom backend as XMMStyle</Abstract>
				</Parameter><Parameter>
					<Name>menu</Name>
					<Abstract type="html">True or False for returning the menu from xamoom backend as Array of XMMMenuItem</Abstract>
				</Parameter><Parameter>
					<Name>language</Name>
					<Abstract type="html">The requested language of the content from xamoom backend</Abstract>
				</Parameter><Parameter>
					<Name>full</Name>
					<Abstract type="html">True or false for returning &quot;unsynced&quot; data or not</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">CompletionHandler returns the result

- param1 result The result from xamoom backend as XMMContentById</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">ErrorHandler returns an error if one occures

- param1 error A XMMError with error informations</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/contentWithContentId:includeStyle:includeMenu:withLanguage:full:completion:error:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XMMEnduserApi/contentWithLocationIdentifier:majorId:includeStyle:includeMenu:withLanguage:completion:error:</TokenIdentifier>
			<Abstract type="html">Makes an api call to xamoom with a unique locationIdentifier (code saved on NFC or QR). If the selected language is not available the
default language will be returned.</Abstract>
			<DeclaredIn>XMMEnduserApi.h</DeclaredIn>
			
			<Declaration>- (void)contentWithLocationIdentifier:(NSString *)locationIdentifier majorId:(NSString *)majorId includeStyle:(BOOL)style includeMenu:(BOOL)menu withLanguage:(NSString *)language completion:(void ( ^ ) ( XMMContentByLocationIdentifier *result ))completionHandler error:(void ( ^ ) ( XMMError *error ))errorHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>locationIdentifier</Name>
					<Abstract type="html">The locationidentifier (code saved on NFC or QR) of the marker from xamoom backend</Abstract>
				</Parameter><Parameter>
					<Name>majorId</Name>
					<Abstract type="html">Major Id, if you are using beacons</Abstract>
				</Parameter><Parameter>
					<Name>style</Name>
					<Abstract type="html">True or False for returning the style from xamoom backend as XMMStyle</Abstract>
				</Parameter><Parameter>
					<Name>menu</Name>
					<Abstract type="html">True of False for returning the menu from xamoom backend as Array of XMMMenuItem</Abstract>
				</Parameter><Parameter>
					<Name>language</Name>
					<Abstract type="html">The requested language of the content from xamoom backend</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">CompletionHandler returns the result

- param1 result The result from xamoom backend as XMMContentByLocationIdentifier</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">ErrorHandler returns an error if one occures

- param1 error A XMMError with error informations</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/contentWithLocationIdentifier:majorId:includeStyle:includeMenu:withLanguage:completion:error:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XMMEnduserApi/contentWithLat:withLon:withLanguage:completion:error:</TokenIdentifier>
			<Abstract type="html">Makes an api call to xamoom with a location (lat &amp;amp; lon). If the selected language is not available the
default language will be returned.</Abstract>
			<DeclaredIn>XMMEnduserApi.h</DeclaredIn>
			
			<Declaration>- (void)contentWithLat:(NSString *)lat withLon:(NSString *)lon withLanguage:(NSString *)language completion:(void ( ^ ) ( XMMContentByLocation *result ))completionHandler error:(void ( ^ ) ( XMMError *error ))errorHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>lat</Name>
					<Abstract type="html">The latitude of a location</Abstract>
				</Parameter><Parameter>
					<Name>lon</Name>
					<Abstract type="html">The longitude of a location</Abstract>
				</Parameter><Parameter>
					<Name>language</Name>
					<Abstract type="html">The requested language of the content from xamoom backend</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">CompletionHandler returns the result

- param1 result The result from xamoom backend as XMMContentByLocation</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">ErrorHandler returns an error if one occures

- param1 error A XMMError with error informations</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/contentWithLat:withLon:withLanguage:completion:error:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XMMEnduserApi/spotMapWithMapTags:withLanguage:completion:error:</TokenIdentifier>
			<Abstract type="html">Makes an api call to xamoom with params to get a list of all items, so you can show them on a map</Abstract>
			<DeclaredIn>XMMEnduserApi.h</DeclaredIn>
			
			<Declaration>- (void)spotMapWithMapTags:(NSArray *)mapTags withLanguage:(NSString *)language completion:(void ( ^ ) ( XMMSpotMap *result ))completionHandler error:(void ( ^ ) ( XMMError *error ))errorHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>mapTags</Name>
					<Abstract type="html">The tags of the wanted spots</Abstract>
				</Parameter><Parameter>
					<Name>language</Name>
					<Abstract type="html">The requested language of the content from xamoom backend</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">CompletionHandler returns the result

- param1 result The result from xamoom backend as XMMSpotMap</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">ErrorHandler returns an error if one occures

- param1 error A XMMError with error informations</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/spotMapWithMapTags:withLanguage:completion:error:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XMMEnduserApi/contentListWithPageSize:withLanguage:withCursor:withTags:completion:error:</TokenIdentifier>
			<Abstract type="html">Makes an api call to xamoom with a unique contentId. If the selected language is not available the default language will be returned.</Abstract>
			<DeclaredIn>XMMEnduserApi.h</DeclaredIn>
			
			<Declaration>- (void)contentListWithPageSize:(int)pageSize withLanguage:(NSString *)language withCursor:(NSString *)cursor withTags:(NSArray *)tags completion:(void ( ^ ) ( XMMContentList *result ))completionHandler error:(void ( ^ ) ( XMMError *error ))errorHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>pageSize</Name>
					<Abstract type="html">Number of items you will get returned</Abstract>
				</Parameter><Parameter>
					<Name>language</Name>
					<Abstract type="html">The requested language of the content from xamoom backend</Abstract>
				</Parameter><Parameter>
					<Name>cursor</Name>
					<Abstract type="html">Cursor for paging</Abstract>
				</Parameter><Parameter>
					<Name>tags</Name>
					<Abstract type="html">Tags as an array</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">CompletionHandler returns the result

- param1 result The result from xamoom backend as XMMContentList</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">ErrorHandler returns an error if one occures

- param1 error A XMMError with error informations</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/contentListWithPageSize:withLanguage:withCursor:withTags:completion:error:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XMMEnduserApi/closestSpotsWithLat:withLon:withRadius:withLimit:withLanguage:completion:error:</TokenIdentifier>
			<Abstract type="html">Makes an api call to xamoom with a location and returns the closest spots.
If the selected language is not available the default language will be returned.</Abstract>
			<DeclaredIn>XMMEnduserApi.h</DeclaredIn>
			
			<Declaration>- (void)closestSpotsWithLat:(float)lat withLon:(float)lon withRadius:(int)radius withLimit:(int)limit withLanguage:(NSString *)language completion:(void ( ^ ) ( XMMClosestSpot *result ))completionHandler error:(void ( ^ ) ( XMMError *error ))errorHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>lat</Name>
					<Abstract type="html">Latitude</Abstract>
				</Parameter><Parameter>
					<Name>lon</Name>
					<Abstract type="html">Longitude</Abstract>
				</Parameter><Parameter>
					<Name>radius</Name>
					<Abstract type="html">Radius in decimenter</Abstract>
				</Parameter><Parameter>
					<Name>limit</Name>
					<Abstract type="html">Limit of the results</Abstract>
				</Parameter><Parameter>
					<Name>language</Name>
					<Abstract type="html">The requested language of the content from xamoom backend</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">CompletionHandler returns the result

- param1 result The result from xamoom backend as XMMClosestSpot</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">ErrorHandler returns an error if one occures

- param1 error A XMMError with error informations</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/closestSpotsWithLat:withLon:withRadius:withLimit:withLanguage:completion:error:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XMMEnduserApi/geofenceAnalyticsMessageWithRequestedLanguage:withDeliveredLanguage:withSystemId:withSystemName:withContentId:withContentName:withSpotId:withSpotName:</TokenIdentifier>
			<Abstract type="html">Makes an api call to xamoom when a user clicks a geofenced content for analytics.</Abstract>
			<DeclaredIn>XMMEnduserApi.h</DeclaredIn>
			
			<Declaration>- (void)geofenceAnalyticsMessageWithRequestedLanguage:(NSString *)requestedLanguage withDeliveredLanguage:(NSString *)deliveredLanguage withSystemId:(NSString *)systemId withSystemName:(NSString *)systemName withContentId:(NSString *)contentId withContentName:(NSString *)contentName withSpotId:(NSString *)spotId withSpotName:(NSString *)spotName</Declaration>
			<Parameters>
				<Parameter>
					<Name>requestedLanguage</Name>
					<Abstract type="html">The language you requested from the xamoom system</Abstract>
				</Parameter><Parameter>
					<Name>deliveredLanguage</Name>
					<Abstract type="html">The language you got from the xamoom system</Abstract>
				</Parameter><Parameter>
					<Name>systemId</Name>
					<Abstract type="html">The systemId you got from the xamoom system</Abstract>
				</Parameter><Parameter>
					<Name>systemName</Name>
					<Abstract type="html">The systemName you got from the xamoom system</Abstract>
				</Parameter><Parameter>
					<Name>contentId</Name>
					<Abstract type="html">The contentId you got from the xamoom system</Abstract>
				</Parameter><Parameter>
					<Name>contentName</Name>
					<Abstract type="html">The contentName you got from the xamoom system</Abstract>
				</Parameter><Parameter>
					<Name>spotId</Name>
					<Abstract type="html">The spotId you got from the system</Abstract>
				</Parameter><Parameter>
					<Name>spotName</Name>
					<Abstract type="html">The spotName you got from the system</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/geofenceAnalyticsMessageWithRequestedLanguage:withDeliveredLanguage:withSystemId:withSystemName:withContentId:withContentName:withSpotId:withSpotName:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XMMEnduserApi/startQRCodeReaderFromViewController:didLoad:</TokenIdentifier>
			<Abstract type="html">Starts the QRCodeReaderViewController to scan qr codes.</Abstract>
			<DeclaredIn>XMMEnduserApi.h</DeclaredIn>
			
			<Declaration>- (void)startQRCodeReaderFromViewController:(UIViewController *)viewController didLoad:(void ( ^ ) ( NSString *locationIdentifier , NSString *url ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>viewController</Name>
					<Abstract type="html">The ViewController from where you want to call the QRCodeReader (usually self)</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">CompletionHandler returns the result
- param1 locationIdentifier NSString with only the locaitionIdentifier of the scanned QR
- param2 url NSString wiht the complete scanned url</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/startQRCodeReaderFromViewController:didLoad:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
        
        
	</File>
</Tokens>